<!-- Plugin Configuration File. Read more: https://plugins.jetbrains.com/docs/intellij/plugin-configuration-file.html -->
<idea-plugin>
    <!-- Unique identifier of the plugin. It should be FQN. It cannot be changed between the plugin versions. -->
    <id>io.github.future0923.DebugPower</id>

    <!-- Public plugin name should be written in Title Case.
         Guidelines: https://plugins.jetbrains.com/docs/marketplace/plugin-overview-page.html#plugin-name -->
    <name>DebugTools</name>

    <!-- A displayed Vendor name or Organization ID displayed on the Plugins Page. -->
    <vendor email="future94@qq.com" url="https://github.com/future0923">future0923</vendor>

    <!-- Description of the plugin displayed on the Plugin Page and IDE Plugin Manager.
         Simple HTML elements (text formatting, paragraphs, and lists) can be added inside of <![CDATA[ ]]> tag.
         Guidelines: https://plugins.jetbrains.com/docs/marketplace/plugin-overview-page.html#plugin-description -->
    <description><![CDATA[
    focusing on improving development efficiency and shortening debugging cycles. <a href="https://debug-tools.cc">Official Website</a>.
    <ul>
        <li>Hot deployment in seconds: The traditional deployment process is generally to submit code -> pull code -> package -> deploy -> restart the project before the written code can take effect. Hot deployment can skip this tedious process. After the developer modifies the code, there is no need to manually trigger packaging or restart the service. The application can load the new logic in real time and run, greatly shortening the feedback cycle. After we introduced hot deployment in development/testing environments, the overall development efficiency of the team can be greatly improved, especially for high-frequency iteration scenarios in agile development mode.</li>
        <li>Hot reload in seconds: When writing code in the traditional way, you need to restart the application to make it effective. However, hot reload can make the written code effective immediately without restarting the application, so that the code changes written by the developer can take effect instantly, greatly improving the iteration efficiency. Supports changes in properties and methods of classes (including proxy classes), Spring, Mybatis and other mainstream frameworks.</li>
        <li>Call any Java method: There is no need to call it layer by layer after complex business verification from the Controller layer like API. The method can be directly called to test whether the result is achieved without writing test cases. Combined with hot reload, it can be modified quickly without restarting.</li>
        <li>SQL statements and time consumption: Without modifying any application code, you can print the executed SQL statements and time consumption.</li>
        <li>Search Http Url: Jump directly to the corresponding method definition location through the given URL information. Built-in powerful URL information extraction function, all forms of URLs can be accurately located.</li>
        <li>Groovy: Execute Groovy scripts, you can run code to obtain or modify attached application information for debugging.</li>
    </ul>
    专注于提升开发效率与缩短调试周期。<a href="https://debug-tools.cc">官网</a>。
    <ul>
        <li>秒级热部署: 传统的部署流程一般为提交代码->拉取代码->打包->部署->重启项目后才能让编写的代码生效。而热部署可以跳过这繁琐的流程，开发者修改代码后无需手动触发打包或重启服务，应用即可实时加载新逻辑并运行，极大缩短反馈周期。我们开发/测试等环境引入热部署后，团队整体开发效率可提升大大提升，尤其适用于敏捷开发模式下的高频迭代场景。</li>
        <li>秒级热重载: 传统编写代码时，需要重启应用才能生效，而热重载可以在不重启应用下让编写的代码生效立刻，让开发者编写的代码改动瞬间生效，极大提升迭代效率。支持类(包括代理类)的属性和方法变动、Spring、Mybatis等主流框架。</li>
        <li>调用任意Java方法: 无需像 Api 一样从 Controller 层进过复杂的业务校验后一层层调用进来，方法可以直接调用测试是否达到结果，不用写测试用例。结合热重载可以快速修改，无需重启。</li>
        <li>SQL语句与耗时: 不修改任何应用代码的情况下，可以打印执行的SQL语句与耗时。</li>
        <li>搜索HttpUrl: 通过给定的URL信息直接跳转到相应的方法定义位置。内置强大的URL信息提取功能，各种形式的URL都能精准定位。</li>
        <li>Groovy: 执行 Groovy 脚本，可以运行代码获取或修改附着应用信息调试。</li>
    </ul>
  ]]></description>

    <change-notes>
        <![CDATA[
        <strong>4.0.0</strong>
        <ul>
            <li>增加热部署功能，实现秒级一键热更新远程应用代码。</li>
            <li>增加远程动态编译功能，热部署、热重载时可以选择本地Idea编译还是远程应用动态编译代码</li>
            <li>增加默认类加载器选择功能，执行热部署、热重载、Groovy脚本时可以选择类加载器</li>
            <li>增加 dynamic-datasource 动态数据源 @DS 注解热重载</li>
            <li>增加 hutool 工具包热重载</li>
            <li>增加 Gson 工具包热重载</li>
            <li>增加 EasyExcel 工具包热重载</li>
            <li>增加 FastJson、FastJson2 工具包热重载</li>
            <li>增加 Jackson 工具包热重载</li>
            <li>增加 hibernate-validator 工具包热重载</li>
            <li>重构调用方法功能，远程调用支持热部署后类</li>
            <li>支持调用两级以上内部类方法</li>
            <li>自动附着当前项目启动应用</li>
            <li>优化心跳逻辑</li>
            <li>优化 http 超时时间</li>
            <li>修复RuntimeExceptionWithAttachments：Read access is allowed from inside read-action only的BUG</li>
        </ul>
        ]]>
    </change-notes>

    <!-- Product and plugin compatibility requirements.
         Read more: https://plugins.jetbrains.com/docs/intellij/plugin-compatibility.html -->
    <depends>com.intellij.modules.platform</depends>
    <depends>com.intellij.java</depends>
    <depends>com.intellij.modules.json</depends>

    <!-- Extension points defined by the plugin.
         Read more: https://plugins.jetbrains.com/docs/intellij/plugin-extension-points.html -->
    <extensions defaultExtensionNs="com.intellij">
        <java.programPatcher implementation="io.github.future0923.debug.tools.idea.patcher.DebugToolsJavaProgramPatcher" order="last"/>
        <!--定义自己的Extensions文件格式与目录-->
        <scratch.rootType implementation="io.github.future0923.debug.tools.idea.extensions.ScratchDebugToolsRootType"/>
        <!--扩展文件写入访问权限，允许插件在非项目文件中进行写操作。-->
        <nonProjectFileWritingAccessExtension implementation="io.github.future0923.debug.tools.idea.extensions.MakePluginFilesAlwaysEditable"/>
        <!--项目启动完成后，后台异步地执行-->
        <backgroundPostStartupActivity implementation="io.github.future0923.debug.tools.idea.startup.HotSwapStartupActivity" />
        <!--状态配置-->
        <projectService serviceImplementation="io.github.future0923.debug.tools.idea.setting.DebugToolsSettingState"/>
        <!--文件变更-->
        <projectService serviceImplementation="io.github.future0923.debug.tools.idea.utils.FileChangedService"/>

        <!--设置-->
        <projectConfigurable instance="io.github.future0923.debug.tools.idea.setting.DebugToolsSettingConfigurable"
                             id="DebugToolsTool.Setting"
                             displayName="DebugTools"
                             nonDefaultProject="true"/>

        <toolWindow id="DebugTools"
                    anchor="right"
                    secondary="false"
                    icon="/icon/project.svg"
                    order="last"
                    canCloseContents="false"
                    factoryClass="io.github.future0923.debug.tools.idea.tool.DebugToolsToolWindowFactory"/>

        <!--通知-->
        <applicationService serviceImplementation="io.github.future0923.debug.tools.idea.utils.DebugToolsNotifierUtil"/>
        <notificationGroup id="DebugTools" displayType="BALLOON"/>

        <!--json编辑器代码提示-->
        <completion.contributor language="JSON"
                                implementationClass="io.github.future0923.debug.tools.idea.completion.DebugToolsJsonEditorCompletionContributor"/>

        <!--json编辑器代码导航-->
        <lang.directNavigationProvider
                implementation="io.github.future0923.debug.tools.idea.navigation.DebugToolsJsonEditorDirectNavigationProvider"/>
    </extensions>

    <actions>
        <group id="DebugTools.Tool">
            <separator/>
            <add-to-group group-id="EditorPopupMenu" anchor="first"/>
            <action id="DebugToolsTool.QuickDebug"
                    class="io.github.future0923.debug.tools.idea.action.QuickDebugEditorPopupMenuAction"
                    text="Quick Debug"
                    description="Quickly call to the current location for execution">
                <keyboard-shortcut keymap="$default" first-keystroke="shift ctrl M"/>
            </action>
            <action id="DebugToolsTool.ExecuteLast"
                    class="io.github.future0923.debug.tools.idea.action.ExecuteLastEditorPopupMenuAction"
                    text="Execute Last"
                    description="Quickly call last for execution">
                <keyboard-shortcut keymap="$default" first-keystroke="shift ctrl L"/>
            </action>
            <action id="DebugToolsTool.ExecuteLastWithDefaultClassLoader"
                    class="io.github.future0923.debug.tools.idea.action.ExecuteLastWithDefaultClassLoaderEditorPopupMenuAction"
                    text="Execute Last With Default ClassLoader"
                    description="Quickly call last with default classloader for execution">
                <keyboard-shortcut keymap="$default" first-keystroke="shift ctrl D"/>
            </action>
            <action id="DebugToolsTool.EvaluateGroovy"
                    class="io.github.future0923.debug.tools.idea.action.GroovyConsoleAction"
                    text="Groovy Console"
                    description="Evaluate groovy script for attach application">
                <keyboard-shortcut keymap="$default" first-keystroke="shift ctrl G"/>
            </action>
            <separator/>
        </group>
        <group id="DebugTools.Run">
            <separator/>
            <add-to-group group-id="RunContextGroup" anchor="last"/>
            <action id="DebugTools.RunGroovy"
                    text="Run Current Groovy"
                    icon="AllIcons.Actions.Execute"
                    description="Run current groovy"
                    class="io.github.future0923.debug.tools.idea.action.RunGroovyAction"/>
            <action id="DebugTools.CompileXmlFileToTarget"
                    description="Run current xml file to target"
                    class="io.github.future0923.debug.tools.idea.action.CompileXmlFileToTargetAction"/>
            <action id="DebugTools.RemoteCompiler"
                    description="Hot deploy the current file through remote compilation"
                    class="io.github.future0923.debug.tools.idea.action.RemoteCompilerAction"/>
            <separator/>
        </group>
        <action id="DebugTools.HttpUrl"
                class="io.github.future0923.debug.tools.idea.action.HttpUrlSearchGotoAction"
                text="Search Http Url" description="Search http url and goto it">
            <keyboard-shortcut keymap="$default" first-keystroke="ctrl alt N"/>
        </action>
        <group id="DebugTools.Toolbar">
            <action class="io.github.future0923.debug.tools.idea.tool.action.AttachAction"/>
            <action class="io.github.future0923.debug.tools.idea.tool.action.ConnectAction"/>
            <action class="io.github.future0923.debug.tools.idea.tool.action.ClearCacheAction"/>
            <separator text="Separator"/>
            <reference ref="DebugToolsTool.EvaluateGroovy"/>
            <separator text="Separator"/>
            <reference ref="DebugTools.HttpUrl"/>
            <separator text="Separator"/>
        </group>
        <group id="DebugToolsHotSwap">
            <add-to-group group-id="ToolbarRunGroup" anchor="after"
                          relative-to-action="MoreRunToolbarActions"/>
            <add-to-group group-id="RunToolbarMainActionGroup" anchor="after"
                          relative-to-action="MoreRunToolbarActions"/>
            <action id="HotSwapSwitchAction"
                    class="io.github.future0923.debug.tools.idea.action.HotSwapSwitchAction"/>
            <action id="DeployAction"
                    class="io.github.future0923.debug.tools.idea.action.HotDeploymentAction"
                    text="Hot Deployment"
                    description="Hot deploy the changed files to the attached application"/>
        </group>
    </actions>

    <applicationListeners>
        <listener class="io.github.future0923.debug.tools.idea.listener.idea.DebugToolsExecutionListener"
                  topic="com.intellij.execution.ExecutionListener"/>
    </applicationListeners>
</idea-plugin>